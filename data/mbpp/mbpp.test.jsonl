{"name": "mbpp_11_remove_Occ", "language": "py", "prompt": "def remove_Occ(s,ch):\n    \"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_Occ", "visible_tests": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "test": "def check(candidate):\n    assert candidate(\"hello\",\"l\") == \"heo\"\n    assert candidate(\"abcda\",\"a\") == \"bcd\"\n    assert candidate(\"PHP\",\"P\") == \"H\"\n\ndef test_check():\n    check(remove_Occ)\n\ntest_check()\n", "gt": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s "}
{"name": "mbpp_12_sort_matrix", "language": "py", "prompt": "def sort_matrix(M):\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_matrix", "visible_tests": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ndef test_check():\n    check(sort_matrix)\n\ntest_check()\n", "gt": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result"}
{"name": "mbpp_14_find_Volume", "language": "py", "prompt": "def find_Volume(l,b,h) :\n    \"\"\"\n\tWrite a python function to find the volume of a triangular prism.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Volume", "visible_tests": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "test": "def check(candidate):\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n\ndef test_check():\n    check(find_Volume)\n\ntest_check()\n", "gt": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) "}
{"name": "mbpp_16_text_lowercase_underscore", "language": "py", "prompt": "def text_lowercase_underscore(text):\n    \"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_lowercase_underscore", "visible_tests": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "test": "def check(candidate):\n    assert candidate(\"aab_cbbbc\")==(True)\n    assert candidate(\"aab_Abbbc\")==(False)\n    assert candidate(\"Aaab_abbbc\")==(False)\n\ndef test_check():\n    check(text_lowercase_underscore)\n\ntest_check()\n", "gt": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"}
{"name": "mbpp_17_square_perimeter", "language": "py", "prompt": "def square_perimeter(a):\n    \"\"\"\n\tWrite a function that returns the perimeter of a square given its side length as input.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_perimeter", "visible_tests": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "test": "def check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n\ndef test_check():\n    check(square_perimeter)\n\ntest_check()\n", "gt": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter"}
{"name": "mbpp_18_remove_dirty_chars", "language": "py", "prompt": "def remove_dirty_chars(string, second_string):\n    \"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_dirty_chars", "visible_tests": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "test": "def check(candidate):\n    assert candidate(\"probasscurve\", \"pros\") == 'bacuve'\n    assert candidate(\"digitalindia\", \"talent\") == 'digiidi'\n    assert candidate(\"exoticmiles\", \"toxic\") == 'emles'\n\ndef test_check():\n    check(remove_dirty_chars)\n\ntest_check()\n", "gt": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) "}
{"name": "mbpp_19_test_duplicate", "language": "py", "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_duplicate", "visible_tests": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "test": "def check(candidate):\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n\ndef test_check():\n    check(test_duplicate)\n\ntest_check()\n", "gt": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     "}
{"name": "mbpp_20_is_woodall", "language": "py", "prompt": "def is_woodall(x):\n    \"\"\"\n\tWrite a function to check if the given number is woodball or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_woodall", "visible_tests": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "test": "def check(candidate):\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n\ndef test_check():\n    check(is_woodall)\n\ntest_check()\n", "gt": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False"}
{"name": "mbpp_56_check", "language": "py", "prompt": "def check(n):\n    \"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check", "visible_tests": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "test": "def check(candidate):\n    assert candidate(70) == False\n    assert candidate(23) == False\n    assert candidate(73) == True\n\ndef test_check():\n    check(check)\n\ntest_check()\n", "gt": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  "}
{"name": "mbpp_57_find_Max_Num", "language": "py", "prompt": "def find_Max_Num(arr) :\n    \"\"\"\n\tWrite a python function to find the largest number that can be formed with the given list of digits.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Max_Num", "visible_tests": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "test": "def check(candidate):\n    assert candidate([1,2,3]) == 321\n    assert candidate([4,5,6,1]) == 6541\n    assert candidate([1,2,3,9]) == 9321\n\ndef test_check():\n    check(find_Max_Num)\n\ntest_check()\n", "gt": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num "}
{"name": "mbpp_58_opposite_Signs", "language": "py", "prompt": "def opposite_Signs(x,y):\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "opposite_Signs", "visible_tests": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False", "assert opposite_Signs(-2,2) == True"], "test": "def check(candidate):\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n    assert candidate(-2,2) == True\n\ndef test_check():\n    check(opposite_Signs)\n\ntest_check()\n", "gt": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); "}
{"name": "mbpp_59_is_octagonal", "language": "py", "prompt": "def is_octagonal(n):\n    \"\"\"\n\tWrite a function to find the nth octagonal number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_octagonal", "visible_tests": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "test": "def check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n\ndef test_check():\n    check(is_octagonal)\n\ntest_check()\n", "gt": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n "}
{"name": "mbpp_61_count_Substrings", "language": "py", "prompt": "def count_Substrings(s):\n    \"\"\"\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Substrings", "visible_tests": ["assert count_Substrings('112112') == 6", "assert count_Substrings('111') == 6", "assert count_Substrings('1101112') == 12"], "test": "def check(candidate):\n    assert candidate('112112') == 6\n    assert candidate('111') == 6\n    assert candidate('1101112') == 12\n\ndef test_check():\n    check(count_Substrings)\n\ntest_check()\n", "gt": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count"}
{"name": "mbpp_62_smallest_num", "language": "py", "prompt": "def smallest_num(xs):\n    \"\"\"\n\tWrite a python function to find smallest number in a list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "smallest_num", "visible_tests": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "test": "def check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n\ndef test_check():\n    check(smallest_num)\n\ntest_check()\n", "gt": "def smallest_num(xs):\n  return min(xs)\n"}
{"name": "mbpp_63_max_difference", "language": "py", "prompt": "def max_difference(test_list):\n    \"\"\"\n\tWrite a function to find the maximum difference between available pairs in the given tuple list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_difference", "visible_tests": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "test": "def check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\ndef test_check():\n    check(max_difference)\n\ntest_check()\n", "gt": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) "}
{"name": "mbpp_64_subject_marks", "language": "py", "prompt": "def subject_marks(subjectmarks):\n    \"\"\"\n\tWrite a function to sort a list of tuples using the second value of each tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "subject_marks", "visible_tests": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "test": "def check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n\ndef test_check():\n    check(subject_marks)\n\ntest_check()\n", "gt": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks"}
{"name": "mbpp_65_recursive_list_sum", "language": "py", "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n\tWrite a function to flatten a list and sum all of its elements.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "recursive_list_sum", "visible_tests": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "test": "def check(candidate):\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n\ndef test_check():\n    check(recursive_list_sum)\n\ntest_check()\n", "gt": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total"}
{"name": "mbpp_66_pos_count", "language": "py", "prompt": "def pos_count(list):\n    \"\"\"\n\tWrite a python function to count the number of positive numbers in a list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pos_count", "visible_tests": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "test": "def check(candidate):\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n\ndef test_check():\n    check(pos_count)\n\ntest_check()\n", "gt": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count "}
{"name": "mbpp_67_bell_number", "language": "py", "prompt": "def bell_number(n):\n    \"\"\"\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_number", "visible_tests": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "test": "def check(candidate):\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n\ndef test_check():\n    check(bell_number)\n\ntest_check()\n", "gt": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] "}
{"name": "mbpp_68_is_Monotonic", "language": "py", "prompt": "def is_Monotonic(A):\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Monotonic", "visible_tests": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "test": "def check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ndef test_check():\n    check(is_Monotonic)\n\ntest_check()\n", "gt": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "}
{"name": "mbpp_69_is_sublist", "language": "py", "prompt": "def is_sublist(l, s):\n    \"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_sublist", "visible_tests": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "test": "def check(candidate):\n    assert candidate([2,4,3,5,7],[3,7])==False\n    assert candidate([2,4,3,5,7],[4,3])==True\n    assert candidate([2,4,3,5,7],[1,6])==False\n\ndef test_check():\n    check(is_sublist)\n\ntest_check()\n", "gt": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set"}
{"name": "mbpp_70_get_equal", "language": "py", "prompt": "def get_equal(Input):\n    \"\"\"\n\tWrite a function to find whether all the given tuples have equal length or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_equal", "visible_tests": ["assert get_equal([(11, 22, 33), (44, 55, 66)]) == True", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False", "assert get_equal([(1, 2), (3, 4)]) == True"], "test": "def check(candidate):\n    assert candidate([(11, 22, 33), (44, 55, 66)]) == True\n    assert candidate([(1, 2, 3), (4, 5, 6, 7)]) == False\n    assert candidate([(1, 2), (3, 4)]) == True\n\ndef test_check():\n    check(get_equal)\n\ntest_check()\n", "gt": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1"}
{"name": "mbpp_71_comb_sort", "language": "py", "prompt": "def comb_sort(nums):\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "comb_sort", "visible_tests": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "test": "def check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n\ndef test_check():\n    check(comb_sort)\n\ntest_check()\n", "gt": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums"}
{"name": "mbpp_72_dif_Square", "language": "py", "prompt": "def dif_Square(n):\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dif_Square", "visible_tests": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n\ndef test_check():\n    check(dif_Square)\n\ntest_check()\n", "gt": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False"}
{"name": "mbpp_74_is_samepatterns", "language": "py", "prompt": "def is_samepatterns(colors, patterns):\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_samepatterns", "visible_tests": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"], "test": "def check(candidate):\n    assert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n", "gt": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True"}
{"name": "mbpp_75_find_tuples", "language": "py", "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_tuples", "visible_tests": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"], "test": "def check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n\ndef test_check():\n    check(find_tuples)\n\ntest_check()\n", "gt": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res"}
{"name": "mbpp_77_is_Diff", "language": "py", "prompt": "def is_Diff(n):\n    \"\"\"\n\tWrite a python function to find whether a number is divisible by 11.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Diff", "visible_tests": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "test": "def check(candidate):\n    assert is_Diff (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n\ndef test_check():\n    check(is_Diff)\n\ntest_check()\n", "gt": "def is_Diff(n): \n    return (n % 11 == 0) "}
{"name": "mbpp_79_word_len", "language": "py", "prompt": "def word_len(s):\n    \"\"\"\n\tWrite a python function to check whether the length of the word is odd or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "word_len", "visible_tests": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "test": "def check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n\ndef test_check():\n    check(word_len)\n\ntest_check()\n", "gt": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False"}
{"name": "mbpp_80_tetrahedral_number", "language": "py", "prompt": "def tetrahedral_number(n):\n    \"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tetrahedral_number", "visible_tests": ["assert tetrahedral_number(5) == 35", "assert tetrahedral_number(6) == 56", "assert tetrahedral_number(7) == 84"], "test": "def check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n\ndef test_check():\n    check(tetrahedral_number)\n\ntest_check()\n", "gt": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6"}
{"name": "mbpp_82_volume_sphere", "language": "py", "prompt": "def volume_sphere(r):\n    \"\"\"\n\tWrite a function to find the volume of a sphere.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_sphere", "visible_tests": ["assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)", "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)", "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)\n    assert math.isclose(candidate(25), 65449.84694978735, rel_tol=0.001)\n    assert math.isclose(candidate(20), 33510.32163829113, rel_tol=0.001)\n\ndef test_check():\n    check(volume_sphere)\n\ntest_check()\n", "gt": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume"}
{"name": "mbpp_83_get_Char", "language": "py", "prompt": "def get_Char(strr):\n    \"\"\"\n\tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Char", "visible_tests": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "test": "def check(candidate):\n    assert candidate(\"abc\") == \"f\"\n    assert candidate(\"gfg\") == \"t\"\n    assert candidate(\"ab\") == \"c\"\n\ndef test_check():\n    check(get_Char)\n\ntest_check()\n", "gt": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)"}
{"name": "mbpp_84_sequence", "language": "py", "prompt": "def sequence(n):\n    \"\"\"\n\tWrite a function to find the nth number in the newman conway sequence.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequence", "visible_tests": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "test": "def check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n\ndef test_check():\n    check(sequence)\n\ntest_check()\n", "gt": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"}
{"name": "mbpp_85_surfacearea_sphere", "language": "py", "prompt": "def surfacearea_sphere(r):\n    \"\"\"\n\tWrite a function to find the surface area of a sphere.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_sphere", "visible_tests": ["assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)\n    assert math.isclose(candidate(15), 2827.4333882308138, rel_tol=0.001)\n    assert math.isclose(candidate(20), 5026.548245743669, rel_tol=0.001)\n\ndef test_check():\n    check(surfacearea_sphere)\n\ntest_check()\n", "gt": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea"}
{"name": "mbpp_86_centered_hexagonal_number", "language": "py", "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n\tWrite a function to find nth centered hexagonal number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "centered_hexagonal_number", "visible_tests": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "test": "def check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\ndef test_check():\n    check(centered_hexagonal_number)\n\ntest_check()\n", "gt": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1"}
{"name": "mbpp_87_merge_dictionaries_three", "language": "py", "prompt": "def merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n\tWrite a function to merge three dictionaries into a single dictionary.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_dictionaries_three", "visible_tests": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "test": "def check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n\ndef test_check():\n    check(merge_dictionaries_three)\n\ntest_check()\n", "gt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict"}
{"name": "mbpp_88_freq_count", "language": "py", "prompt": "def freq_count(list1):\n    \"\"\"\n\tWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "freq_count", "visible_tests": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"], "test": "def check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n\ndef test_check():\n    check(freq_count)\n\ntest_check()\n", "gt": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count"}
{"name": "mbpp_89_closest_num", "language": "py", "prompt": "def closest_num(N):\n    \"\"\"\n\tWrite a function to find the closest smaller number than n.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "closest_num", "visible_tests": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "test": "def check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n\ndef test_check():\n    check(closest_num)\n\ntest_check()\n", "gt": "def closest_num(N):\n  return (N - 1)"}
{"name": "mbpp_90_len_log", "language": "py", "prompt": "def len_log(list1):\n    \"\"\"\n\tWrite a python function to find the length of the longest word.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "len_log", "visible_tests": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "test": "def check(candidate):\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n\ndef test_check():\n    check(len_log)\n\ntest_check()\n", "gt": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max"}
{"name": "mbpp_91_find_substring", "language": "py", "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n\tWrite a function to check if a string is present as a substring in a given list of string values.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_substring", "visible_tests": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "test": "def check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n\ndef test_check():\n    check(find_substring)\n\ntest_check()\n", "gt": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False"}
{"name": "mbpp_92_is_undulating", "language": "py", "prompt": "def is_undulating(n):\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_undulating", "visible_tests": ["assert is_undulating(1212121) == True", "assert is_undulating(1991) == False", "assert is_undulating(121) == True"], "test": "def check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n", "gt": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True"}
{"name": "mbpp_93_power", "language": "py", "prompt": "def power(a,b):\n    \"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power", "visible_tests": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "test": "def check(candidate):\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n\ndef test_check():\n    check(power)\n\ntest_check()\n", "gt": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)"}
{"name": "mbpp_94_index_minimum", "language": "py", "prompt": "def index_minimum(test_list):\n    \"\"\"\n\tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_minimum", "visible_tests": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "test": "def check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\ndef test_check():\n    check(index_minimum)\n\ntest_check()\n", "gt": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) "}
{"name": "mbpp_95_Find_Min_Length", "language": "py", "prompt": "def Find_Min_Length(lst):\n    \"\"\"\n\tWrite a python function to find the length of the smallest list in a list of lists.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min_Length", "visible_tests": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "test": "def check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n\ndef test_check():\n    check(Find_Min_Length)\n\ntest_check()\n", "gt": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength "}
{"name": "mbpp_96_divisor", "language": "py", "prompt": "def divisor(n):\n    \"\"\"\n\tWrite a python function to find the number of divisors of a given integer.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisor", "visible_tests": ["assert divisor(15) == 4", "assert divisor(12) == 6", "assert divisor(9) == 3"], "test": "def check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\ndef test_check():\n    check(divisor)\n\ntest_check()\n", "gt": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x"}
{"name": "mbpp_97_frequency_lists", "language": "py", "prompt": "def frequency_lists(list1):\n    \"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency_lists", "visible_tests": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n\ndef test_check():\n    check(frequency_lists)\n\ntest_check()\n", "gt": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n"}
{"name": "mbpp_98_multiply_num", "language": "py", "prompt": "def multiply_num(numbers):\n    \"\"\"\n\tWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_num", "visible_tests": ["assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)", "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n    assert math.isclose(candidate((-10,-20,-30)), -2000.0, rel_tol=0.001)\n    assert math.isclose(candidate((19,15,18)), 1710.0, rel_tol=0.001)\n\ndef test_check():\n    check(multiply_num)\n\ntest_check()\n", "gt": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) "}
{"name": "mbpp_99_decimal_to_binary", "language": "py", "prompt": "def decimal_to_binary(n):\n    \"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "decimal_to_binary", "visible_tests": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111'"], "test": "def check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n", "gt": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") "}
{"name": "mbpp_100_next_smallest_palindrome", "language": "py", "prompt": "def next_smallest_palindrome(num):\n    \"\"\"\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_smallest_palindrome", "visible_tests": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "test": "def check(candidate):\n    assert candidate(99)==101\n    assert candidate(1221)==1331\n    assert candidate(120)==121\n\ndef test_check():\n    check(next_smallest_palindrome)\n\ntest_check()\n", "gt": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i"}
{"name": "mbpp_101_kth_element", "language": "py", "prompt": "def kth_element(arr, k):\n    \"\"\"\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "kth_element", "visible_tests": ["assert kth_element([12,3,5,7,19], 2) == 3", "assert kth_element([17,24,8,23], 3) == 8", "assert kth_element([16,21,25,36,4], 4) == 36"], "test": "def check(candidate):\n    assert candidate([12,3,5,7,19], 2) == 3\n    assert candidate([17,24,8,23], 3) == 8\n    assert candidate([16,21,25,36,4], 4) == 36\n\ndef test_check():\n    check(kth_element)\n\ntest_check()\n", "gt": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]"}
{"name": "mbpp_102_snake_to_camel", "language": "py", "prompt": "def snake_to_camel(word):\n    \"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "visible_tests": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "test": "def check(candidate):\n    assert candidate('python_program')=='PythonProgram'\n    assert candidate('python_language')==('PythonLanguage')\n    assert candidate('programming_language')==('ProgrammingLanguage')\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "gt": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"name": "mbpp_103_eulerian_num", "language": "py", "prompt": "def eulerian_num(n, m):\n    \"\"\"\n\tWrite a function to find the Eulerian number a(n, m).\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "eulerian_num", "visible_tests": ["assert eulerian_num(3, 1) == 4", "assert eulerian_num(4, 1) == 11", "assert eulerian_num(5, 3) == 26"], "test": "def check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n\ndef test_check():\n    check(eulerian_num)\n\ntest_check()\n", "gt": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"}
{"name": "mbpp_104_sort_sublists", "language": "py", "prompt": "def sort_sublists(input_list):\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "visible_tests": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "test": "def check(candidate):\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "gt": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n"}
{"name": "mbpp_105_count", "language": "py", "prompt": "def count(lst):\n    \"\"\"\n\tWrite a python function to count true booleans in the given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count", "visible_tests": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "test": "def check(candidate):\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n\ndef test_check():\n    check(count)\n\ntest_check()\n", "gt": "def count(lst):   \n    return sum(lst) "}
{"name": "mbpp_106_add_lists", "language": "py", "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n\tWrite a function to append the given list to the given tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_lists", "visible_tests": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "test": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\ndef test_check():\n    check(add_lists)\n\ntest_check()\n", "gt": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) "}
{"name": "mbpp_108_merge_sorted_list", "language": "py", "prompt": "def merge_sorted_list(num1,num2,num3):\n    \"\"\"\n\tWrite a function to merge three lists into a single sorted list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_sorted_list", "visible_tests": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "test": "def check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\ndef test_check():\n    check(merge_sorted_list)\n\ntest_check()\n", "gt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)"}
{"name": "mbpp_109_odd_Equivalent", "language": "py", "prompt": "def odd_Equivalent(s,n):\n    \"\"\"\n\tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_Equivalent", "visible_tests": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "test": "def check(candidate):\n    assert candidate(\"011001\",6) == 3\n    assert candidate(\"11011\",5) == 4\n    assert candidate(\"1010\",4) == 2\n\ndef test_check():\n    check(odd_Equivalent)\n\ntest_check()\n", "gt": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count "}
{"name": "mbpp_111_common_in_nested_lists", "language": "py", "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n\tWrite a function to find the common elements in given nested lists.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "common_in_nested_lists", "visible_tests": ["assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])", "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])", "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"], "test": "def check(candidate):\n    assert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n    assert set(candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\n    assert set(candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n\ndef test_check():\n    check(common_in_nested_lists)\n\ntest_check()\n", "gt": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result"}
{"name": "mbpp_113_check_integer", "language": "py", "prompt": "def check_integer(text):\n    \"\"\"\n\tWrite a function to check if a string represents an integer or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_integer", "visible_tests": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "test": "def check(candidate):\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n\ndef test_check():\n    check(check_integer)\n\ntest_check()\n", "gt": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False"}
{"name": "mbpp_115_empty_dit", "language": "py", "prompt": "def empty_dit(list1):\n    \"\"\"\n\tWrite a function to check whether all dictionaries in a list are empty or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "empty_dit", "visible_tests": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"], "test": "def check(candidate):\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n\ndef test_check():\n    check(empty_dit)\n\ntest_check()\n", "gt": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit"}
{"name": "mbpp_116_tuple_to_int", "language": "py", "prompt": "def tuple_to_int(nums):\n    \"\"\"\n\tWrite a function to convert a given tuple of positive integers into a single integer.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_int", "visible_tests": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "test": "def check(candidate):\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n\ndef test_check():\n    check(tuple_to_int)\n\ntest_check()\n", "gt": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result"}
{"name": "mbpp_117_list_to_float", "language": "py", "prompt": "def list_to_float(test_list):\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_to_float", "visible_tests": ["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"], "test": "def check(candidate):\n    assert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert candidate( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n\ndef test_check():\n    check(list_to_float)\n\ntest_check()\n", "gt": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res"}
{"name": "mbpp_118_string_to_list", "language": "py", "prompt": "def string_to_list(string):\n    \"\"\"\n\tWrite a function to convert a string to a list of strings split on the space character.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_list", "visible_tests": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "test": "def check(candidate):\n    assert candidate(\"python programming\")==['python','programming']\n    assert candidate(\"lists tuples strings\")==['lists','tuples','strings']\n    assert candidate(\"write a program\")==['write','a','program']\n\ndef test_check():\n    check(string_to_list)\n\ntest_check()\n", "gt": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst"}
{"name": "mbpp_119_search", "language": "py", "prompt": "def search(arr):\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "search", "visible_tests": ["assert search([1,1,2,2,3]) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8", "assert search([1,2,2,3,3,4,4]) == 1"], "test": "def check(candidate):\n    assert candidate([1,1,2,2,3]) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8]) == 8\n    assert candidate([1,2,2,3,3,4,4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n", "gt": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)"}
{"name": "mbpp_120_max_product_tuple", "language": "py", "prompt": "def max_product_tuple(list1):\n    \"\"\"\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product_tuple", "visible_tests": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"], "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert candidate([(10,20), (15,2), (5,10)] )==200\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484\n\ndef test_check():\n    check(max_product_tuple)\n\ntest_check()\n", "gt": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max"}
{"name": "mbpp_123_amicable_numbers_sum", "language": "py", "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "amicable_numbers_sum", "visible_tests": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "test": "def check(candidate):\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n\ndef test_check():\n    check(amicable_numbers_sum)\n\ntest_check()\n", "gt": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)"}
{"name": "mbpp_124_angle_complex", "language": "py", "prompt": "def angle_complex(a,b):\n    \"\"\"\n\tWrite a function to get the angle of a complex number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "angle_complex", "visible_tests": ["assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)", "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)", "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)\n    assert math.isclose(candidate(2,1j), 0.4636476090008061, rel_tol=0.001)\n    assert math.isclose(candidate(0,2j), 1.5707963267948966, rel_tol=0.001)\n\ndef test_check():\n    check(angle_complex)\n\ntest_check()\n", "gt": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle"}
{"name": "mbpp_125_find_length", "language": "py", "prompt": "def find_length(string):\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_length", "visible_tests": ["assert find_length(\"11000010001\") == 6", "assert find_length(\"10111\") == 1", "assert find_length(\"11011101100101\") == 2"], "test": "def check(candidate):\n    assert candidate(\"11000010001\") == 6\n    assert candidate(\"10111\") == 1\n    assert candidate(\"11011101100101\") == 2\n\ndef test_check():\n    check(find_length)\n\ntest_check()\n", "gt": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0"}
{"name": "mbpp_126_sum", "language": "py", "prompt": "def sum(a,b):\n    \"\"\"\n\tWrite a python function to find the sum of common divisors of two given numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum", "visible_tests": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "test": "def check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n\ndef test_check():\n    check(sum)\n\ntest_check()\n", "gt": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum"}
{"name": "mbpp_127_multiply_int", "language": "py", "prompt": "def multiply_int(x, y):\n    \"\"\"\n\tWrite a function to multiply two integers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_int", "visible_tests": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "test": "def check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n\ndef test_check():\n    check(multiply_int)\n\ntest_check()\n", "gt": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"}
{"name": "mbpp_128_long_words", "language": "py", "prompt": "def long_words(n, str):\n    \"\"\"\n\tWrite a function to find words that are longer than n characters from a given list of words.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "long_words", "visible_tests": ["assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assert long_words(2,\"writing a program\")==['writing','program']", "assert long_words(5,\"sorting list\")==['sorting']"], "test": "def check(candidate):\n    assert candidate(3,\"python is a programming language\")==['python','programming','language']\n    assert candidate(2,\"writing a program\")==['writing','program']\n    assert candidate(5,\"sorting list\")==['sorting']\n\ndef test_check():\n    check(long_words)\n\ntest_check()\n", "gt": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t"}
{"name": "mbpp_129_magic_square_test", "language": "py", "prompt": "def magic_square_test(my_matrix):\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "magic_square_test", "visible_tests": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "test": "def check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\ndef test_check():\n    check(magic_square_test)\n\ntest_check()\n", "gt": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True"}
{"name": "mbpp_130_max_occurrences", "language": "py", "prompt": "def max_occurrences(nums):\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_occurrences", "visible_tests": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"], "test": "def check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n", "gt": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]"}
{"name": "mbpp_131_reverse_vowels", "language": "py", "prompt": "def reverse_vowels(str1):\n    \"\"\"\n\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_vowels", "visible_tests": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "test": "def check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n\ndef test_check():\n    check(reverse_vowels)\n\ntest_check()\n", "gt": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string"}
{"name": "mbpp_132_tup_string", "language": "py", "prompt": "def tup_string(tup1):\n    \"\"\"\n\tWrite a function to convert a tuple to a string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tup_string", "visible_tests": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "test": "def check(candidate):\n    assert candidate(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert candidate(('p','y','t','h','o','n'))==(\"python\")\n    assert candidate(('p','r','o','g','r','a','m'))==(\"program\")\n\ndef test_check():\n    check(tup_string)\n\ntest_check()\n", "gt": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str"}
{"name": "mbpp_133_sum_negativenum", "language": "py", "prompt": "def sum_negativenum(nums):\n    \"\"\"\n\tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_negativenum", "visible_tests": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "test": "def check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n\ndef test_check():\n    check(sum_negativenum)\n\ntest_check()\n", "gt": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)"}
{"name": "mbpp_135_hexagonal_num", "language": "py", "prompt": "def hexagonal_num(n):\n    \"\"\"\n\tWrite a function to find the nth hexagonal number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "hexagonal_num", "visible_tests": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "test": "def check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\ndef test_check():\n    check(hexagonal_num)\n\ntest_check()\n", "gt": "def hexagonal_num(n): \n\treturn n*(2*n - 1) "}
{"name": "mbpp_137_zero_count", "language": "py", "prompt": "def zero_count(nums):\n    \"\"\"\n\tWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "zero_count", "visible_tests": ["assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)", "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n    assert math.isclose(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\n    assert math.isclose(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n\ndef test_check():\n    check(zero_count)\n\ntest_check()\n", "gt": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)"}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "py", "prompt": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sum_Of_Powers_Of_Two", "visible_tests": ["assert is_Sum_Of_Powers_Of_Two(10) == True", "assert is_Sum_Of_Powers_Of_Two(7) == False", "assert is_Sum_Of_Powers_Of_Two(14) == True"], "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n\ndef test_check():\n    check(is_Sum_Of_Powers_Of_Two)\n\ntest_check()\n", "gt": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True"}
{"name": "mbpp_139_circle_circumference", "language": "py", "prompt": "def circle_circumference(r):\n    \"\"\"\n\tWrite a function to find the circumference of a circle.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "circle_circumference", "visible_tests": ["assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)", "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)\n    assert math.isclose(candidate(5), 31.415000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4), 25.132, rel_tol=0.001)\n\ndef test_check():\n    check(circle_circumference)\n\ntest_check()\n", "gt": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter"}
{"name": "mbpp_140_extract_singly", "language": "py", "prompt": "def extract_singly(test_list):\n    \"\"\"\n\tWrite a function to flatten the list of lists into a single set of numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_singly", "visible_tests": ["assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])", "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])", "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"], "test": "def check(candidate):\n    assert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n    assert set(candidate([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\n    assert set(candidate([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])\n\ndef test_check():\n    check(extract_singly)\n\ntest_check()\n", "gt": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) "}
{"name": "mbpp_141_pancake_sort", "language": "py", "prompt": "def pancake_sort(nums):\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pancake_sort", "visible_tests": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "test": "def check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ndef test_check():\n    check(pancake_sort)\n\ntest_check()\n", "gt": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums"}
{"name": "mbpp_142_count_samepair", "language": "py", "prompt": "def count_samepair(list1,list2,list3):\n    \"\"\"\n\tWrite a function to count number items that are identical in the same position of three given lists.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_samepair", "visible_tests": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n\ndef test_check():\n    check(count_samepair)\n\ntest_check()\n", "gt": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result"}
{"name": "mbpp_143_find_lists", "language": "py", "prompt": "def find_lists(Input):\n    \"\"\"\n\tWrite a function to find number of lists present in the given tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lists", "visible_tests": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "test": "def check(candidate):\n    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert candidate(([1, 2], [3, 4], [5, 6]))  == 3\n    assert candidate(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n\ndef test_check():\n    check(find_lists)\n\ntest_check()\n", "gt": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) "}
{"name": "mbpp_145_max_Abs_Diff", "language": "py", "prompt": "def max_Abs_Diff(arr):\n    \"\"\"\n\tWrite a python function to find the maximum difference between any two elements in a given array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Abs_Diff", "visible_tests": ["assert max_Abs_Diff((2,1,5,3)) == 4", "assert max_Abs_Diff((9,3,2,5,1)) == 8", "assert max_Abs_Diff((3,2,1)) == 2"], "test": "def check(candidate):\n    assert candidate((2,1,5,3)) == 4\n    assert candidate((9,3,2,5,1)) == 8\n    assert candidate((3,2,1)) == 2\n\ndef test_check():\n    check(max_Abs_Diff)\n\ntest_check()\n", "gt": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) "}
{"name": "mbpp_160_find_solution", "language": "py", "prompt": "def find_solution(a, b, n):\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_solution", "visible_tests": ["assert find_solution(2, 3, 7) == (2, 1)", "assert find_solution(4, 2, 7) == None", "assert find_solution(1, 13, 17) == (4, 1)"], "test": "def check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n", "gt": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None"}
{"name": "mbpp_161_remove_elements", "language": "py", "prompt": "def remove_elements(list1, list2):\n    \"\"\"\n\tWrite a function to remove all elements from a given list present in another list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_elements", "visible_tests": ["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"], "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n\ndef test_check():\n    check(remove_elements)\n\ntest_check()\n", "gt": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result"}
{"name": "mbpp_162_sum_series", "language": "py", "prompt": "def sum_series(n):\n    \"\"\"\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_series", "visible_tests": ["assert sum_series(6) == 12", "assert sum_series(10) == 30", "assert sum_series(9) == 25"], "test": "def check(candidate):\n    assert candidate(6) == 12\n    assert candidate(10) == 30\n    assert candidate(9) == 25\n\ndef test_check():\n    check(sum_series)\n\ntest_check()\n", "gt": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)"}
{"name": "mbpp_163_area_polygon", "language": "py", "prompt": "def area_polygon(s, l):\n    \"\"\"\n\tWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "area_polygon", "visible_tests": ["assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)", "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)", "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(4, 20), 400., rel_tol=0.001)\n    assert math.isclose(candidate(10, 15), 1731.197, rel_tol=0.001)\n    assert math.isclose(candidate(9, 7), 302.909, rel_tol=0.001)\n\ndef test_check():\n    check(area_polygon)\n\ntest_check()\n", "gt": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area"}
{"name": "mbpp_164_are_equivalent", "language": "py", "prompt": "def are_equivalent(num1, num2):\n    \"\"\"\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "are_equivalent", "visible_tests": ["assert are_equivalent(36, 57) == False", "assert are_equivalent(2, 4) == False", "assert are_equivalent(23, 47) == True"], "test": "def check(candidate):\n    assert candidate(36, 57) == False\n    assert candidate(2, 4) == False\n    assert candidate(23, 47) == True\n\ndef test_check():\n    check(are_equivalent)\n\ntest_check()\n", "gt": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); "}
{"name": "mbpp_165_count_char_position", "language": "py", "prompt": "def count_char_position(str1):\n    \"\"\"\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_char_position", "visible_tests": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "test": "def check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n\ndef test_check():\n    check(count_char_position)\n\ntest_check()\n", "gt": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars "}
{"name": "mbpp_166_find_even_pair", "language": "py", "prompt": "def find_even_pair(A):\n    \"\"\"\n\tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_even_pair", "visible_tests": ["assert find_even_pair([5, 4, 7, 2, 1]) == 4", "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9", "assert find_even_pair([1, 2, 3]) == 1"], "test": "def check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert candidate([1, 2, 3]) == 1\n\ndef test_check():\n    check(find_even_pair)\n\ntest_check()\n", "gt": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count"}
{"name": "mbpp_167_next_power_of_2", "language": "py", "prompt": "def next_power_of_2(n):\n    \"\"\"\n\tWrite a python function to find the smallest power of 2 greater than or equal to n.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_power_of_2", "visible_tests": ["assert next_power_of_2(0) == 1", "assert next_power_of_2(5) == 8", "assert next_power_of_2(17) == 32"], "test": "def check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\ndef test_check():\n    check(next_power_of_2)\n\ntest_check()\n", "gt": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; "}
{"name": "mbpp_168_frequency", "language": "py", "prompt": "def frequency(a,x):\n    \"\"\"\n\tWrite a function to count the number of occurrences of a number in a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency", "visible_tests": ["assert frequency([1,2,3], 4) == 0", "assert frequency([1,2,2,3,3,3,4], 3) == 3", "assert frequency([0,1,2,3,1,2], 1) == 2"], "test": "def check(candidate):\n    assert candidate([1,2,3], 4) == 0\n    assert candidate([1,2,2,3,3,3,4], 3) == 3\n    assert candidate([0,1,2,3,1,2], 1) == 2\n\ndef test_check():\n    check(frequency)\n\ntest_check()\n", "gt": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count "}
{"name": "mbpp_170_sum_range_list", "language": "py", "prompt": "def sum_range_list(list1, m, n):\n    \"\"\"\n\tWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_range_list", "visible_tests": ["assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"], "test": "def check(candidate):\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n\ndef test_check():\n    check(sum_range_list)\n\ntest_check()\n", "gt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   "}
{"name": "mbpp_171_perimeter_pentagon", "language": "py", "prompt": "def perimeter_pentagon(a):\n    \"\"\"\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perimeter_pentagon", "visible_tests": ["assert perimeter_pentagon(5) == 25", "assert perimeter_pentagon(10) == 50", "assert perimeter_pentagon(15) == 75"], "test": "def check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n\ndef test_check():\n    check(perimeter_pentagon)\n\ntest_check()\n", "gt": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter"}
{"name": "mbpp_172_count_occurance", "language": "py", "prompt": "def count_occurance(s):\n    \"\"\"\n\tWrite a function to count the number of occurence of the string 'std' in a given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_occurance", "visible_tests": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2", "assert count_occurance(\"stds\") == 1", "assert count_occurance(\"\") == 0"], "test": "def check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n    assert candidate(\"stds\") == 1\n    assert candidate(\"\") == 0\n\ndef test_check():\n    check(count_occurance)\n\ntest_check()\n", "gt": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count"}
{"name": "mbpp_222_check_type", "language": "py", "prompt": "def check_type(test_tuple):\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_type", "visible_tests": ["assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assert check_type((1, 2, \"4\") ) == False", "assert check_type((3, 2, 1, 4, 5) ) == True"], "test": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n", "gt": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) "}
{"name": "mbpp_223_binary_search", "language": "py", "prompt": "def binary_search(arr, low, high, x):\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "binary_search", "visible_tests": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([1, 1, 2, 2], 5, 1) == False"], "test": "def check(candidate):\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n    assert is_majority([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(binary_search)\n\ntest_check()\n", "gt": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1"}
{"name": "mbpp_224_count_Set_Bits", "language": "py", "prompt": "def count_Set_Bits(n):\n    \"\"\"\n\tWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Set_Bits", "visible_tests": ["assert count_Set_Bits(2) == 1", "assert count_Set_Bits(4) == 1", "assert count_Set_Bits(6) == 2"], "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\ndef test_check():\n    check(count_Set_Bits)\n\ntest_check()\n", "gt": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "}
{"name": "mbpp_226_odd_values_string", "language": "py", "prompt": "def odd_values_string(str):\n    \"\"\"\n\tWrite a python function to remove the characters which have odd index values of a given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_values_string", "visible_tests": ["assert odd_values_string('abcdef') == 'ace'", "assert odd_values_string('python') == 'pto'", "assert odd_values_string('data') == 'dt'", "assert odd_values_string('lambs') == 'lms'"], "test": "def check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n    assert candidate('lambs') == 'lms'\n\ndef test_check():\n    check(odd_values_string)\n\ntest_check()\n", "gt": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result"}
{"name": "mbpp_227_min_of_three", "language": "py", "prompt": "def min_of_three(a,b,c):\n    \"\"\"\n\tWrite a function to find minimum of three numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_of_three", "visible_tests": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "test": "def check(candidate):\n    assert candidate(10,20,0)==0\n    assert candidate(19,15,18)==15\n    assert candidate(-10,-20,-30)==-30\n\ndef test_check():\n    check(min_of_three)\n\ntest_check()\n", "gt": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest "}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "py", "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n\tWrite a python function to check whether all the bits are unset in the given range or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Bits_Set_In_The_Given_Range", "visible_tests": ["assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True", "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"], "test": "def check(candidate):\n    assert candidate(4,1,2) == True\n    assert candidate(17,2,4) == True\n    assert candidate(39,4,6) == False\n\ndef test_check():\n    check(all_Bits_Set_In_The_Given_Range)\n\ntest_check()\n", "gt": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False"}
{"name": "mbpp_229_re_arrange_array", "language": "py", "prompt": "def re_arrange_array(arr, n):\n    \"\"\"\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "re_arrange_array", "visible_tests": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "test": "def check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n\ndef test_check():\n    check(re_arrange_array)\n\ntest_check()\n", "gt": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr"}
{"name": "mbpp_230_replace_blank", "language": "py", "prompt": "def replace_blank(str1,char):\n    \"\"\"\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_blank", "visible_tests": ["assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")", "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"], "test": "def check(candidate):\n    assert candidate(\"hello people\",'@')==(\"hello@people\")\n    assert candidate(\"python program language\",'$')==(\"python$program$language\")\n    assert candidate(\"blank space\",\"-\")==(\"blank-space\")\n\ndef test_check():\n    check(replace_blank)\n\ntest_check()\n", "gt": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2"}
{"name": "mbpp_232_larg_nnum", "language": "py", "prompt": "def larg_nnum(list1,n):\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "larg_nnum", "visible_tests": ["assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"], "test": "def check(candidate):\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n\ndef test_check():\n    check(larg_nnum)\n\ntest_check()\n", "gt": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest"}
{"name": "mbpp_233_lateralsuface_cylinder", "language": "py", "prompt": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cylinder.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsuface_cylinder", "visible_tests": ["assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 125.66000000000001, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 251.32000000000002, rel_tol=0.001)\n\ndef test_check():\n    check(lateralsuface_cylinder)\n\ntest_check()\n", "gt": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface"}
{"name": "mbpp_234_volume_cube", "language": "py", "prompt": "def volume_cube(l):\n    \"\"\"\n\tWrite a function to find the volume of a cube given its side length.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_cube", "visible_tests": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "test": "def check(candidate):\n    assert candidate(3)==27\n    assert candidate(2)==8\n    assert candidate(5)==125\n\ndef test_check():\n    check(volume_cube)\n\ntest_check()\n", "gt": "def volume_cube(l):\n  volume = l * l * l\n  return volume"}
{"name": "mbpp_235_even_bit_set_number", "language": "py", "prompt": "def even_bit_set_number(n):\n    \"\"\"\n\tWrite a python function to set all even bits of a given number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_bit_set_number", "visible_tests": ["assert even_bit_set_number(10) == 10", "assert even_bit_set_number(20) == 30", "assert even_bit_set_number(30) == 30"], "test": "def check(candidate):\n    assert candidate(10) == 10\n    assert candidate(20) == 30\n    assert candidate(30) == 30\n\ndef test_check():\n    check(even_bit_set_number)\n\ntest_check()\n", "gt": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) "}
{"name": "mbpp_237_check_occurences", "language": "py", "prompt": "def check_occurences(test_list):\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_occurences", "visible_tests": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "test": "def check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n\ndef test_check():\n    check(check_occurences)\n\ntest_check()\n", "gt": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) "}
{"name": "mbpp_238_number_of_substrings", "language": "py", "prompt": "def number_of_substrings(str):\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_of_substrings", "visible_tests": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "test": "def check(candidate):\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n\ndef test_check():\n    check(number_of_substrings)\n\ntest_check()\n", "gt": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); "}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "py", "prompt": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_total_number_of_sequences", "visible_tests": ["assert get_total_number_of_sequences(10, 4) == 4", "assert get_total_number_of_sequences(5, 2) == 6", "assert get_total_number_of_sequences(16, 3) == 84"], "test": "def check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n\ndef test_check():\n    check(get_total_number_of_sequences)\n\ntest_check()\n", "gt": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]"}
{"name": "mbpp_240_replace_list", "language": "py", "prompt": "def replace_list(list1,list2):\n    \"\"\"\n\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_list", "visible_tests": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert candidate([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n\ndef test_check():\n    check(replace_list)\n\ntest_check()\n", "gt": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n"}
{"name": "mbpp_242_count_charac", "language": "py", "prompt": "def count_charac(str1):\n    \"\"\"\n\tWrite a function to count the total number of characters in a string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_charac", "visible_tests": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "test": "def check(candidate):\n    assert candidate(\"python programming\")==18\n    assert candidate(\"language\")==8\n    assert candidate(\"words\")==5\n\ndef test_check():\n    check(count_charac)\n\ntest_check()\n", "gt": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total"}
{"name": "mbpp_244_next_Perfect_Square", "language": "py", "prompt": "def next_Perfect_Square(N):\n    \"\"\"\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_Perfect_Square", "visible_tests": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "test": "def check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n\ndef test_check():\n    check(next_Perfect_Square)\n\ntest_check()\n", "gt": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN "}
{"name": "mbpp_245_max_sum", "language": "py", "prompt": "def max_sum(arr):\n    \"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum", "visible_tests": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "assert max_sum([80, 60, 30, 40, 20, 10]) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"], "test": "def check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n    assert candidate([80, 60, 30, 40, 20, 10]) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n\ndef test_check():\n    check(max_sum)\n\ntest_check()\n", "gt": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum"}
{"name": "mbpp_246_babylonian_squareroot", "language": "py", "prompt": "def babylonian_squareroot(number):\n    \"\"\"\n\tWrite a function for computing square roots using the babylonian method.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "babylonian_squareroot", "visible_tests": ["assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)\n    assert math.isclose(candidate(2), 1.414213562373095, rel_tol=0.001)\n    assert math.isclose(candidate(9), 3.0, rel_tol=0.001)\n\ndef test_check():\n    check(babylonian_squareroot)\n\ntest_check()\n", "gt": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;"}
{"name": "mbpp_247_lps", "language": "py", "prompt": "def lps(str):\n    \"\"\"\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lps", "visible_tests": ["assert lps(\"TENS FOR TENS\") == 5", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"], "test": "def check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5\n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9\n\ndef test_check():\n    check(lps)\n\ntest_check()\n", "gt": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]"}
{"name": "mbpp_248_harmonic_sum", "language": "py", "prompt": "def harmonic_sum(n):\n    \"\"\"\n\tWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "harmonic_sum", "visible_tests": ["assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)", "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)", "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)\n    assert math.isclose(candidate(4), 2.083333333333333, rel_tol=0.001)\n    assert math.isclose(candidate(19), 3.547739657143682, rel_tol=0.001)\n\ndef test_check():\n    check(harmonic_sum)\n\ntest_check()\n", "gt": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) "}
{"name": "mbpp_249_intersection_array", "language": "py", "prompt": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n\tWrite a function to find the intersection of two arrays.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "intersection_array", "visible_tests": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "test": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n\ndef test_check():\n    check(intersection_array)\n\ntest_check()\n", "gt": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result"}
{"name": "mbpp_250_count_X", "language": "py", "prompt": "def count_X(tup, x):\n    \"\"\"\n\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_X", "visible_tests": ["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "test": "def check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n\ndef test_check():\n    check(count_X)\n\ntest_check()\n", "gt": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count "}
{"name": "mbpp_251_insert_element", "language": "py", "prompt": "def insert_element(list,element):\n    \"\"\"\n\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "insert_element", "visible_tests": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"], "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n\ndef test_check():\n    check(insert_element)\n\ntest_check()\n", "gt": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list"}
{"name": "mbpp_252_convert", "language": "py", "prompt": "def convert(numbers):\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert", "visible_tests": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "test": "def check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0,0.0)\n    assert candidate(5) == (5.0,0.0)\n\ndef test_check():\n    check(convert)\n\ntest_check()\n", "gt": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) "}
{"name": "mbpp_253_count_integer", "language": "py", "prompt": "def count_integer(list1):\n    \"\"\"\n\tWrite a python function that returns the number of integer elements in a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_integer", "visible_tests": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "test": "def check(candidate):\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n\ndef test_check():\n    check(count_integer)\n\ntest_check()\n", "gt": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr"}
{"name": "mbpp_255_combinations_colors", "language": "py", "prompt": "def combinations_colors(l, n):\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_colors", "visible_tests": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "test": "def check(candidate):\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n\ndef test_check():\n    check(combinations_colors)\n\ntest_check()\n", "gt": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n"}
{"name": "mbpp_256_count_Primes_nums", "language": "py", "prompt": "def count_Primes_nums(n):\n    \"\"\"\n\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Primes_nums", "visible_tests": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "test": "def check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\ndef test_check():\n    check(count_Primes_nums)\n\ntest_check()\n", "gt": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr"}
{"name": "mbpp_257_swap_numbers", "language": "py", "prompt": "def swap_numbers(a,b):\n    \"\"\"\n\tWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_numbers", "visible_tests": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "test": "def check(candidate):\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n\ndef test_check():\n    check(swap_numbers)\n\ntest_check()\n", "gt": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)"}
{"name": "mbpp_259_maximize_elements", "language": "py", "prompt": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n\tWrite a function to maximize the given two tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximize_elements", "visible_tests": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n\ndef test_check():\n    check(maximize_elements)\n\ntest_check()\n", "gt": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "}
{"name": "mbpp_260_newman_prime", "language": "py", "prompt": "def newman_prime(n):\n    \"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "newman_prime", "visible_tests": ["assert newman_prime(3) == 7", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "test": "def check(candidate):\n    assert candidate(3) == 7\n    assert candidate(4) == 17\n    assert candidate(5) == 41\n\ndef test_check():\n    check(newman_prime)\n\ntest_check()\n", "gt": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"}
{"name": "mbpp_261_division_elements", "language": "py", "prompt": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "division_elements", "visible_tests": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n\ndef test_check():\n    check(division_elements)\n\ntest_check()\n", "gt": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "}
{"name": "mbpp_262_split_two_parts", "language": "py", "prompt": "def split_two_parts(list1, L):\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_two_parts", "visible_tests": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "test": "def check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\ndef test_check():\n    check(split_two_parts)\n\ntest_check()\n", "gt": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"}
{"name": "mbpp_264_dog_age", "language": "py", "prompt": "def dog_age(h_age):\n    \"\"\"\n\tWrite a function to calculate a dog's age in dog's years.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dog_age", "visible_tests": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "test": "def check(candidate):\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n\ndef test_check():\n    check(dog_age)\n\ntest_check()\n", "gt": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age"}
{"name": "mbpp_265_list_split", "language": "py", "prompt": "def list_split(S, step):\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_split", "visible_tests": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"], "test": "def check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ndef test_check():\n    check(list_split)\n\ntest_check()\n", "gt": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]"}
{"name": "mbpp_266_lateralsurface_cube", "language": "py", "prompt": "def lateralsurface_cube(l):\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cube given its side length.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cube", "visible_tests": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "test": "def check(candidate):\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n\ndef test_check():\n    check(lateralsurface_cube)\n\ntest_check()\n", "gt": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA"}
{"name": "mbpp_267_square_Sum", "language": "py", "prompt": "def square_Sum(n):\n    \"\"\"\n\tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "visible_tests": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "test": "def check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "gt": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) "}
{"name": "mbpp_268_find_star_num", "language": "py", "prompt": "def find_star_num(n):\n    \"\"\"\n\tWrite a function to find the n'th star number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_star_num", "visible_tests": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "test": "def check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n\ndef test_check():\n    check(find_star_num)\n\ntest_check()\n", "gt": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) "}
{"name": "mbpp_269_ascii_value", "language": "py", "prompt": "def ascii_value(k):\n    \"\"\"\n\tWrite a function to find the ascii value of a character.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "ascii_value", "visible_tests": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "test": "def check(candidate):\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n\ndef test_check():\n    check(ascii_value)\n\ntest_check()\n", "gt": "def ascii_value(k):\n  ch=k\n  return ord(ch)"}
{"name": "mbpp_270_sum_even_and_even_index", "language": "py", "prompt": "def sum_even_and_even_index(arr):\n    \"\"\"\n\tWrite a python function to find the sum of even numbers at even positions of a list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_even_and_even_index", "visible_tests": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26", "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"], "test": "def check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert candidate([5, 6, 12, 1]) == 12\n\ndef test_check():\n    check(sum_even_and_even_index)\n\ntest_check()\n", "gt": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum"}
{"name": "mbpp_271_even_Power_Sum", "language": "py", "prompt": "def even_Power_Sum(n):\n    \"\"\"\n\tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_Power_Sum", "visible_tests": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "test": "def check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n\ndef test_check():\n    check(even_Power_Sum)\n\ntest_check()\n", "gt": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; "}
{"name": "mbpp_272_rear_extract", "language": "py", "prompt": "def rear_extract(test_list):\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rear_extract", "visible_tests": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "test": "def check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\ndef test_check():\n    check(rear_extract)\n\ntest_check()\n", "gt": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) "}
{"name": "mbpp_273_substract_elements", "language": "py", "prompt": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "substract_elements", "visible_tests": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "test": "def check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n", "gt": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) "}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "py", "prompt": "def even_binomial_Coeff_Sum( n):\n    \"\"\"\n\tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_binomial_Coeff_Sum", "visible_tests": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "test": "def check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n\ndef test_check():\n    check(even_binomial_Coeff_Sum)\n\ntest_check()\n", "gt": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) "}
{"name": "mbpp_276_volume_cylinder", "language": "py", "prompt": "def volume_cylinder(r,h):\n    \"\"\"\n\tWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_cylinder", "visible_tests": ["assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 251.32000000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 502.64000000000004, rel_tol=0.001)\n\ndef test_check():\n    check(volume_cylinder)\n\ntest_check()\n", "gt": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume"}
{"name": "mbpp_277_dict_filter", "language": "py", "prompt": "def dict_filter(dict,n):\n    \"\"\"\n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dict_filter", "visible_tests": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "test": "def check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n\ndef test_check():\n    check(dict_filter)\n\ntest_check()\n", "gt": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result"}
{"name": "mbpp_278_count_first_elements", "language": "py", "prompt": "def count_first_elements(test_tup):\n    \"\"\"\n\tWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_first_elements", "visible_tests": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "test": "def check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n\ndef test_check():\n    check(count_first_elements)\n\ntest_check()\n", "gt": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) "}
{"name": "mbpp_279_is_num_decagonal", "language": "py", "prompt": "def is_num_decagonal(n):\n    \"\"\"\n\tWrite a function to find the nth decagonal number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_num_decagonal", "visible_tests": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "test": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\ndef test_check():\n    check(is_num_decagonal)\n\ntest_check()\n", "gt": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n "}
{"name": "mbpp_280_sequential_search", "language": "py", "prompt": "def sequential_search(dlist, item):\n    \"\"\"\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequential_search", "visible_tests": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "test": "def check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n\ndef test_check():\n    check(sequential_search)\n\ntest_check()\n", "gt": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos"}
{"name": "mbpp_281_all_unique", "language": "py", "prompt": "def all_unique(test_list):\n    \"\"\"\n\tWrite a python function to check if the elements of a given list are unique or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_unique", "visible_tests": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "test": "def check(candidate):\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n\ndef test_check():\n    check(all_unique)\n\ntest_check()\n", "gt": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True"}
{"name": "mbpp_282_sub_list", "language": "py", "prompt": "def sub_list(nums1,nums2):\n    \"\"\"\n\tWrite a function to subtract two lists element-wise.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sub_list", "visible_tests": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "test": "def check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n\ndef test_check():\n    check(sub_list)\n\ntest_check()\n", "gt": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)"}
{"name": "mbpp_283_validate", "language": "py", "prompt": "def validate(n):\n    \"\"\"\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "validate", "visible_tests": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "test": "def check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\ndef test_check():\n    check(validate)\n\ntest_check()\n", "gt": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True"}
{"name": "mbpp_284_check_element", "language": "py", "prompt": "def check_element(list,element):\n    \"\"\"\n\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_element", "visible_tests": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "test": "def check(candidate):\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],'green')==True\n\ndef test_check():\n    check(check_element)\n\ntest_check()\n", "gt": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element"}
{"name": "mbpp_285_text_match_two_three", "language": "py", "prompt": "def text_match_two_three(text):\n    \"\"\"\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_two_three", "visible_tests": ["assert text_match_two_three(\"ac\")==(False)", "assert text_match_two_three(\"dc\")==(False)", "assert text_match_two_three(\"abbbba\")==(True)"], "test": "def check(candidate):\n    assert candidate(\"ac\")==(False)\n    assert candidate(\"dc\")==(False)\n    assert candidate(\"abbbba\")==(True)\n\ndef test_check():\n    check(text_match_two_three)\n\ntest_check()\n", "gt": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "py", "prompt": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum_repeated", "visible_tests": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "test": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n", "gt": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far"}
{"name": "mbpp_287_square_Sum", "language": "py", "prompt": "def square_Sum(n):\n    \"\"\"\n\tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "visible_tests": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120"], "test": "def check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "gt": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)"}
{"name": "mbpp_290_max_length", "language": "py", "prompt": "def max_length(list1):\n    \"\"\"\n\tWrite a function to find the list of maximum length in a list of lists.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length", "visible_tests": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"], "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert candidate([[5], [15,20,25]])==(3, [15,20,25])\n\ndef test_check():\n    check(max_length)\n\ntest_check()\n", "gt": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)"}
{"name": "mbpp_291_count_no_of_ways", "language": "py", "prompt": "def count_no_of_ways(n, k):\n    \"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_no_of_ways", "visible_tests": ["assert count_no_of_ways(2, 4) == 16", "assert count_no_of_ways(3, 2) == 6", "assert count_no_of_ways(4, 4) == 228"], "test": "def check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\ndef test_check():\n    check(count_no_of_ways)\n\ntest_check()\n", "gt": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]"}
{"name": "mbpp_292_find", "language": "py", "prompt": "def find(n,m):\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find", "visible_tests": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "test": "def check(candidate):\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n\ndef test_check():\n    check(find)\n\ntest_check()\n", "gt": "def find(n,m):  \n    q = n//m \n    return (q)"}
{"name": "mbpp_293_otherside_rightangle", "language": "py", "prompt": "def otherside_rightangle(w,h):\n    \"\"\"\n\tWrite a function to find the third side of a right angled triangle.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "otherside_rightangle", "visible_tests": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"], "test": "def check(candidate):\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n\ndef test_check():\n    check(otherside_rightangle)\n\ntest_check()\n", "gt": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s"}
{"name": "mbpp_294_max_val", "language": "py", "prompt": "def max_val(listval):\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_val", "visible_tests": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5\n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n", "gt": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)"}
{"name": "mbpp_295_sum_div", "language": "py", "prompt": "def sum_div(number):\n    \"\"\"\n\tWrite a function to return the sum of all divisors of a number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_div", "visible_tests": ["assert sum_div(8)==7", "assert sum_div(12)==16", "assert sum_div(7)==1"], "test": "def check(candidate):\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n\ndef test_check():\n    check(sum_div)\n\ntest_check()\n", "gt": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)"}
{"name": "mbpp_296_get_Inv_Count", "language": "py", "prompt": "def get_Inv_Count(arr):\n    \"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Inv_Count", "visible_tests": ["assert get_Inv_Count([1,20,6,4,5]) == 5", "assert get_Inv_Count([1,2,1]) == 1", "assert get_Inv_Count([1,2,5,6,1]) == 3"], "test": "def check(candidate):\n    assert candidate([1,20,6,4,5]) == 5\n    assert candidate([1,2,1]) == 1\n    assert candidate([1,2,5,6,1]) == 3\n\ndef test_check():\n    check(get_Inv_Count)\n\ntest_check()\n", "gt": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count "}
{"name": "mbpp_297_flatten_list", "language": "py", "prompt": "def flatten_list(list1):\n    \"\"\"\n\tWrite a function to flatten a given nested list structure.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "flatten_list", "visible_tests": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "test": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ndef test_check():\n    check(flatten_list)\n\ntest_check()\n", "gt": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list "}
{"name": "mbpp_299_max_aggregate", "language": "py", "prompt": "def max_aggregate(stdata):\n    \"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_aggregate", "visible_tests": ["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "test": "def check(candidate):\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n\ndef test_check():\n    check(max_aggregate)\n\ntest_check()\n", "gt": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])"}
{"name": "mbpp_300_count_binary_seq", "language": "py", "prompt": "def count_binary_seq(n):\n    \"\"\"\n\tWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_binary_seq", "visible_tests": ["assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(1), 2.0, rel_tol=0.001)\n    assert math.isclose(candidate(2), 6.0, rel_tol=0.001)\n    assert math.isclose(candidate(3), 20.0, rel_tol=0.001)\n\ndef test_check():\n    check(count_binary_seq)\n\ntest_check()\n", "gt": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res "}
{"name": "mbpp_301_dict_depth", "language": "py", "prompt": "def dict_depth(d):\n    \"\"\"\n\tWrite a function to find the depth of a dictionary.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dict_depth", "visible_tests": ["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assert dict_depth({'a':1, 'b': {'c':'python'}})==2", "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "test": "def check(candidate):\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert candidate({'a':1, 'b': {'c':'python'}})==2\n    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n\ndef test_check():\n    check(dict_depth)\n\ntest_check()\n", "gt": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"}
{"name": "mbpp_304_find_Element", "language": "py", "prompt": "def find_Element(arr,ranges,rotations,index) :\n    \"\"\"\n\tWrite a python function to find element at a given index after number of rotations.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Element", "visible_tests": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "test": "def check(candidate):\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n\ndef test_check():\n    check(find_Element)\n\ntest_check()\n", "gt": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] "}
{"name": "mbpp_305_start_withp", "language": "py", "prompt": "def start_withp(words):\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "start_withp", "visible_tests": ["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "test": "def check(candidate):\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert candidate([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert candidate([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n", "gt": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()"}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "py", "prompt": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_increasing_subseq", "visible_tests": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "test": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n", "gt": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]"}
{"name": "mbpp_307_colon_tuplex", "language": "py", "prompt": "def colon_tuplex(tuplex,m,n):\n    \"\"\"\n\tWrite a function to get a colon of a tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "colon_tuplex", "visible_tests": ["assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "test": "def check(candidate):\n    assert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\n    assert candidate((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert candidate((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n\ndef test_check():\n    check(colon_tuplex)\n\ntest_check()\n", "gt": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon"}
{"name": "mbpp_308_large_product", "language": "py", "prompt": "def large_product(nums1, nums2, N):\n    \"\"\"\n\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "large_product", "visible_tests": ["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n\ndef test_check():\n    check(large_product)\n\ntest_check()\n", "gt": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result"}
{"name": "mbpp_309_maximum", "language": "py", "prompt": "def maximum(a,b):\n    \"\"\"\n\tWrite a python function to find the maximum of two numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximum", "visible_tests": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "test": "def check(candidate):\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n", "gt": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b "}
{"name": "mbpp_310_string_to_tuple", "language": "py", "prompt": "def string_to_tuple(str1):\n    \"\"\"\n\tWrite a function to convert a given string to a tuple of characters.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_tuple", "visible_tests": ["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')", "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], "test": "def check(candidate):\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert candidate(\"15.10\")==('1', '5', '.', '1', '0')\n\ndef test_check():\n    check(string_to_tuple)\n\ntest_check()\n", "gt": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result"}
{"name": "mbpp_311_set_left_most_unset_bit", "language": "py", "prompt": "def set_left_most_unset_bit(n):\n    \"\"\"\n\tWrite a python function to set the left most unset bit.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "set_left_most_unset_bit", "visible_tests": ["assert set_left_most_unset_bit(10) == 14", "assert set_left_most_unset_bit(12) == 14", "assert set_left_most_unset_bit(15) == 15"], "test": "def check(candidate):\n    assert candidate(10) == 14\n    assert candidate(12) == 14\n    assert candidate(15) == 15\n\ndef test_check():\n    check(set_left_most_unset_bit)\n\ntest_check()\n", "gt": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) "}
{"name": "mbpp_312_volume_cone", "language": "py", "prompt": "def volume_cone(r,h):\n    \"\"\"\n\tWrite a function to find the volume of a cone.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_cone", "visible_tests": ["assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)", "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)", "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"], "test": "def check(candidate):\n    assert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)\n    assert math.isclose(candidate(10,15), 1570.7963267948965, rel_tol=0.001)\n    assert math.isclose(candidate(19,17), 6426.651371693521, rel_tol=0.001)\n\ndef test_check():\n    check(volume_cone)\n\ntest_check()\n", "gt": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume"}
{"name": "mbpp_388_highest_Power_of_2", "language": "py", "prompt": "def highest_Power_of_2(n):\n    \"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "highest_Power_of_2", "visible_tests": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "test": "def check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\ndef test_check():\n    check(highest_Power_of_2)\n\ntest_check()\n", "gt": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res "}
{"name": "mbpp_389_find_lucas", "language": "py", "prompt": "def find_lucas(n):\n    \"\"\"\n\tWrite a function to find the n'th lucas number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lucas", "visible_tests": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "test": "def check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\ndef test_check():\n    check(find_lucas)\n\ntest_check()\n", "gt": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "}
{"name": "mbpp_390_add_string", "language": "py", "prompt": "def add_string(list_, string):\n    \"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_string", "visible_tests": ["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "test": "def check(candidate):\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n\ndef test_check():\n    check(add_string)\n\ntest_check()\n", "gt": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string"}
{"name": "mbpp_391_convert_list_dictionary", "language": "py", "prompt": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert_list_dictionary", "visible_tests": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "test": "def check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n\ndef test_check():\n    check(convert_list_dictionary)\n\ntest_check()\n", "gt": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result"}
{"name": "mbpp_392_get_max_sum ", "language": "py", "prompt": "def get_max_sum (n):\n    \"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_max_sum ", "visible_tests": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "test": "def check(candidate):\n    assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2\n\ndef test_check():\n    check(get_max_sum )\n\ntest_check()\n", "gt": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]"}
{"name": "mbpp_393_max_length_list", "language": "py", "prompt": "def max_length_list(input_list):\n    \"\"\"\n\tWrite a function to find the list with maximum length.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length_list", "visible_tests": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n\ndef test_check():\n    check(max_length_list)\n\ntest_check()\n", "gt": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)"}
{"name": "mbpp_394_check_distinct", "language": "py", "prompt": "def check_distinct(test_tup):\n    \"\"\"\n\tWrite a function to check if given tuple contains no duplicates.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_distinct", "visible_tests": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "test": "def check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n\ndef test_check():\n    check(check_distinct)\n\ntest_check()\n", "gt": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res "}
{"name": "mbpp_395_first_non_repeating_character", "language": "py", "prompt": "def first_non_repeating_character(str1):\n    \"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_non_repeating_character", "visible_tests": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "test": "def check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n\ndef test_check():\n    check(first_non_repeating_character)\n\ntest_check()\n", "gt": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None"}
{"name": "mbpp_396_check_char", "language": "py", "prompt": "def check_char(string):\n    \"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_char", "visible_tests": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "test": "def check(candidate):\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n\ndef test_check():\n    check(check_char)\n\ntest_check()\n", "gt": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" "}
{"name": "mbpp_397_median_numbers", "language": "py", "prompt": "def median_numbers(a,b,c):\n    \"\"\"\n\tWrite a function to find the median of three numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_numbers", "visible_tests": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "test": "def check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n\ndef test_check():\n    check(median_numbers)\n\ntest_check()\n", "gt": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median"}
{"name": "mbpp_398_sum_of_digits", "language": "py", "prompt": "def sum_of_digits(nums):\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_of_digits", "visible_tests": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "test": "def check(candidate):\n    assert candidate([10,2,56])==14\n    assert candidate([[10,20,4,5,'b',70,'a']])==19\n    assert candidate([10,20,-4,5,-70])==19\n\ndef test_check():\n    check(sum_of_digits)\n\ntest_check()\n", "gt": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"}
{"name": "mbpp_399_bitwise_xor", "language": "py", "prompt": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bitwise_xor", "visible_tests": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\ndef test_check():\n    check(bitwise_xor)\n\ntest_check()\n", "gt": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "}
{"name": "mbpp_400_extract_freq", "language": "py", "prompt": "def extract_freq(test_list):\n    \"\"\"\n\tWrite a function to extract the number of unique tuples in the given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_freq", "visible_tests": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "test": "def check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n\ndef test_check():\n    check(extract_freq)\n\ntest_check()\n", "gt": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)"}
{"name": "mbpp_401_add_nested_tuples", "language": "py", "prompt": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_nested_tuples", "visible_tests": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n", "gt": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "}
{"name": "mbpp_404_minimum", "language": "py", "prompt": "def minimum(a,b):\n    \"\"\"\n\tWrite a python function to find the minimum of two numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "minimum", "visible_tests": ["assert minimum(1,2) == 1", "assert minimum(-5,-4) == -5", "assert minimum(0,0) == 0"], "test": "def check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n\ndef test_check():\n    check(minimum)\n\ntest_check()\n", "gt": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b "}
{"name": "mbpp_405_check_tuplex", "language": "py", "prompt": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n\tWrite a function to check whether an element exists within a tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_tuplex", "visible_tests": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "test": "def check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\ndef test_check():\n    check(check_tuplex)\n\ntest_check()\n", "gt": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False"}
{"name": "mbpp_406_find_Parity", "language": "py", "prompt": "def find_Parity(x):\n    \"\"\"\n\tWrite a python function to find whether the parity of a given number is odd.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Parity", "visible_tests": ["assert find_Parity(12) == False", "assert find_Parity(7) == True", "assert find_Parity(10) == False"], "test": "def check(candidate):\n    assert candidate(12) == False\n    assert candidate(7) == True\n    assert candidate(10) == False\n\ndef test_check():\n    check(find_Parity)\n\ntest_check()\n", "gt": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False"}
{"name": "mbpp_407_rearrange_bigger", "language": "py", "prompt": "def rearrange_bigger(n):\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rearrange_bigger", "visible_tests": ["assert rearrange_bigger(12)==21", "assert rearrange_bigger(10)==False", "assert rearrange_bigger(102)==120"], "test": "def check(candidate):\n    assert candidate(12)==21\n    assert candidate(10)==False\n    assert candidate(102)==120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n", "gt": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False"}
{"name": "mbpp_408_push", "language": "py", "prompt": "def push(i, j):\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "push", "visible_tests": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "test": "def check(candidate):\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(push)\n\ntest_check()\n", "gt": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs"}
{"name": "mbpp_409_min_product_tuple", "language": "py", "prompt": "def min_product_tuple(list1):\n    \"\"\"\n\tWrite a function to find the minimum product from the pairs of tuples within a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_product_tuple", "visible_tests": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30", "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"], "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n\ndef test_check():\n    check(min_product_tuple)\n\ntest_check()\n", "gt": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min"}
{"name": "mbpp_410_min_val", "language": "py", "prompt": "def min_val(listval):\n    \"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_val", "visible_tests": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n\ndef test_check():\n    check(min_val)\n\ntest_check()\n", "gt": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val"}
{"name": "mbpp_411_snake_to_camel", "language": "py", "prompt": "def snake_to_camel(word):\n    \"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "visible_tests": ["assert snake_to_camel('android_tv') == 'AndroidTv'", "assert snake_to_camel('google_pixel') == 'GooglePixel'", "assert snake_to_camel('apple_watch') == 'AppleWatch'"], "test": "def check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "gt": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"name": "mbpp_412_remove_odd", "language": "py", "prompt": "def remove_odd(l):\n    \"\"\"\n\tWrite a python function to remove odd numbers from a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "visible_tests": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "test": "def check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "gt": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l"}
{"name": "mbpp_413_extract_nth_element", "language": "py", "prompt": "def extract_nth_element(list1, n):\n    \"\"\"\n\tWrite a function to extract the nth element from a given list of tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_nth_element", "visible_tests": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "test": "def check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\ndef test_check():\n    check(extract_nth_element)\n\ntest_check()\n", "gt": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result"}
{"name": "mbpp_414_overlapping", "language": "py", "prompt": "def overlapping(list1,list2):\n    \"\"\"\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "overlapping", "visible_tests": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "test": "def check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n\ndef test_check():\n    check(overlapping)\n\ntest_check()\n", "gt": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False"}
{"name": "mbpp_415_max_Product", "language": "py", "prompt": "def max_Product(arr):\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Product", "visible_tests": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "test": "def check(candidate):\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert candidate([1,2,3]) == (2,3)\n\ndef test_check():\n    check(max_Product)\n\ntest_check()\n", "gt": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    "}
{"name": "mbpp_417_group_tuples", "language": "py", "prompt": "def group_tuples(Input):\n    \"\"\"\n\tWrite a function to find common first element in given list of tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "group_tuples", "visible_tests": ["assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "test": "def check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\ndef test_check():\n    check(group_tuples)\n\ntest_check()\n", "gt": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] "}
{"name": "mbpp_418_Find_Max", "language": "py", "prompt": "def Find_Max(lst):\n    \"\"\"\n\tWrite a python function to find the element of a list having maximum length.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max", "visible_tests": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "test": "def check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\ndef test_check():\n    check(Find_Max)\n\ntest_check()\n", "gt": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList"}
{"name": "mbpp_419_round_and_sum", "language": "py", "prompt": "def round_and_sum(list1):\n    \"\"\"\n\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "round_and_sum", "visible_tests": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "test": "def check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert candidate([5,2,9,24.3,29])==345\n    assert candidate([25.0,56.7,89.2])==513\n\ndef test_check():\n    check(round_and_sum)\n\ntest_check()\n", "gt": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum"}
{"name": "mbpp_420_cube_Sum", "language": "py", "prompt": "def cube_Sum(n):\n    \"\"\"\n\tWrite a python function to find the cube sum of first n even natural numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_Sum", "visible_tests": ["assert cube_Sum(2) == 72", "assert cube_Sum(3) == 288", "assert cube_Sum(4) == 800"], "test": "def check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n\ndef test_check():\n    check(cube_Sum)\n\ntest_check()\n", "gt": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum"}
{"name": "mbpp_421_concatenate_tuple", "language": "py", "prompt": "def concatenate_tuple(test_tup):\n    \"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "concatenate_tuple", "visible_tests": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "test": "def check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n\ndef test_check():\n    check(concatenate_tuple)\n\ntest_check()\n", "gt": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) "}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "py", "prompt": "def find_Average_Of_Cube(n):\n    \"\"\"\n\tWrite a python function to find the average of cubes of first n natural numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Average_Of_Cube", "visible_tests": ["assert find_Average_Of_Cube(2) == 4.5", "assert find_Average_Of_Cube(3) == 12", "assert find_Average_Of_Cube(1) == 1"], "test": "def check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\ndef test_check():\n    check(find_Average_Of_Cube)\n\ntest_check()\n", "gt": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) "}
{"name": "mbpp_424_extract_rear", "language": "py", "prompt": "def extract_rear(test_tuple):\n    \"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_rear", "visible_tests": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "test": "def check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n\ndef test_check():\n    check(extract_rear)\n\ntest_check()\n", "gt": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) "}
{"name": "mbpp_425_count_element_in_list", "language": "py", "prompt": "def count_element_in_list(list1, x):\n    \"\"\"\n\tWrite a function to count the number of sublists containing a particular element.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_element_in_list", "visible_tests": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n\ndef test_check():\n    check(count_element_in_list)\n\ntest_check()\n", "gt": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr"}
{"name": "mbpp_426_filter_oddnumbers", "language": "py", "prompt": "def filter_oddnumbers(nums):\n    \"\"\"\n\tWrite a function to filter odd numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_oddnumbers", "visible_tests": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n\ndef test_check():\n    check(filter_oddnumbers)\n\ntest_check()\n", "gt": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums"}
{"name": "mbpp_427_change_date_format", "language": "py", "prompt": "def change_date_format(dt):\n    \"\"\"\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "change_date_format", "visible_tests": ["assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assert change_date_format(\"2020-11-13\") == '13-11-2020'", "assert change_date_format(\"2021-04-26\") == '26-04-2021'"], "test": "def check(candidate):\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n\ndef test_check():\n    check(change_date_format)\n\ntest_check()\n", "gt": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"}
{"name": "mbpp_428_shell_sort", "language": "py", "prompt": "def shell_sort(my_list):\n    \"\"\"\n\tWrite a function to sort the given array by using shell sort.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "shell_sort", "visible_tests": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "test": "def check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n\ndef test_check():\n    check(shell_sort)\n\ntest_check()\n", "gt": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list"}
{"name": "mbpp_429_and_tuples", "language": "py", "prompt": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "and_tuples", "visible_tests": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\ndef test_check():\n    check(and_tuples)\n\ntest_check()\n", "gt": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "}
{"name": "mbpp_430_parabola_directrix", "language": "py", "prompt": "def parabola_directrix(a, b, c):\n    \"\"\"\n\tWrite a function to find the directrix of a parabola.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "parabola_directrix", "visible_tests": ["assert parabola_directrix(5,3,2)==-198", "assert parabola_directrix(9,8,4)==-2336", "assert parabola_directrix(2,4,6)==-130"], "test": "def check(candidate):\n    assert candidate(5,3,2)==-198\n    assert candidate(9,8,4)==-2336\n    assert candidate(2,4,6)==-130\n\ndef test_check():\n    check(parabola_directrix)\n\ntest_check()\n", "gt": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix"}
{"name": "mbpp_431_common_element", "language": "py", "prompt": "def common_element(list1, list2):\n    \"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "common_element", "visible_tests": ["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assert common_element([1,2,3,4,5], [6,7,8,9])==None", "assert common_element(['a','b','c'], ['d','b','e'])==True"], "test": "def check(candidate):\n    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\n    assert candidate(['a','b','c'], ['d','b','e'])==True\n\ndef test_check():\n    check(common_element)\n\ntest_check()\n", "gt": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result"}
{"name": "mbpp_432_median_trapezium", "language": "py", "prompt": "def median_trapezium(base1,base2,height):\n    \"\"\"\n\tWrite a function to find the median length of a trapezium.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_trapezium", "visible_tests": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "test": "def check(candidate):\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n\ndef test_check():\n    check(median_trapezium)\n\ntest_check()\n", "gt": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median"}
{"name": "mbpp_433_check_greater", "language": "py", "prompt": "def check_greater(arr, number):\n    \"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_greater", "visible_tests": ["assert check_greater([1, 2, 3, 4, 5], 4) == False", "assert check_greater([2, 3, 4, 5, 6], 8) == True", "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"], "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == False\n    assert candidate([2, 3, 4, 5, 6], 8) == True\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == True\n\ndef test_check():\n    check(check_greater)\n\ntest_check()\n", "gt": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]"}
{"name": "mbpp_434_text_match_one", "language": "py", "prompt": "def text_match_one(text):\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by one or more b's.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_one", "visible_tests": ["assert text_match_one(\"ac\")==False", "assert text_match_one(\"dc\")==False", "assert text_match_one(\"abba\")==True"], "test": "def check(candidate):\n    assert candidate(\"ac\")==False\n    assert candidate(\"dc\")==False\n    assert candidate(\"abba\")==True\n\ndef test_check():\n    check(text_match_one)\n\ntest_check()\n", "gt": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n"}
{"name": "mbpp_435_last_Digit", "language": "py", "prompt": "def last_Digit(n) :\n    \"\"\"\n\tWrite a python function to find the last digit of a given number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit", "visible_tests": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "test": "def check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\ndef test_check():\n    check(last_Digit)\n\ntest_check()\n", "gt": "def last_Digit(n) :\n    return (n % 10) "}
{"name": "mbpp_436_neg_nos", "language": "py", "prompt": "def neg_nos(list1):\n    \"\"\"\n\tWrite a python function to return the negative numbers in a list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "neg_nos", "visible_tests": ["assert neg_nos([-1,4,5,-6]) == [-1,-6]", "assert neg_nos([-1,-2,3,4]) == [-1,-2]", "assert neg_nos([-7,-6,8,9]) == [-7,-6]"], "test": "def check(candidate):\n    assert candidate([-1,4,5,-6]) == [-1,-6]\n    assert candidate([-1,-2,3,4]) == [-1,-2]\n    assert candidate([-7,-6,8,9]) == [-7,-6]\n\ndef test_check():\n    check(neg_nos)\n\ntest_check()\n", "gt": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out "}
{"name": "mbpp_437_remove_odd", "language": "py", "prompt": "def remove_odd(str1):\n    \"\"\"\n\tWrite a function to remove odd characters in a string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "visible_tests": ["assert remove_odd(\"python\")==(\"yhn\")", "assert remove_odd(\"program\")==(\"rga\")", "assert remove_odd(\"language\")==(\"agae\")"], "test": "def check(candidate):\n    assert candidate(\"python\")==(\"yhn\")\n    assert candidate(\"program\")==(\"rga\")\n    assert candidate(\"language\")==(\"agae\")\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "gt": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2"}
{"name": "mbpp_438_count_bidirectional", "language": "py", "prompt": "def count_bidirectional(test_list):\n    \"\"\"\n\tWrite a function to count bidirectional tuple pairs.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_bidirectional", "visible_tests": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3", "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2", "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"], "test": "def check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4\n\ndef test_check():\n    check(count_bidirectional)\n\ntest_check()\n", "gt": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res"}
{"name": "mbpp_439_multiple_to_single", "language": "py", "prompt": "def multiple_to_single(L):\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiple_to_single", "visible_tests": ["assert multiple_to_single([11, 33, 50])==113350", "assert multiple_to_single([-1,2,3,4,5,6])==-123456", "assert multiple_to_single([10,15,20,25])==10152025"], "test": "def check(candidate):\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n\ndef test_check():\n    check(multiple_to_single)\n\ntest_check()\n", "gt": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x"}
{"name": "mbpp_440_find_adverb_position", "language": "py", "prompt": "def find_adverb_position(text):\n    \"\"\"\n\tWrite a function to find the first adverb and their positions in a given sentence.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverb_position", "visible_tests": ["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "test": "def check(candidate):\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n\ndef test_check():\n    check(find_adverb_position)\n\ntest_check()\n", "gt": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))"}
{"name": "mbpp_441_surfacearea_cube", "language": "py", "prompt": "def surfacearea_cube(l):\n    \"\"\"\n\tWrite a function to find the surface area of a cube of a given size.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cube", "visible_tests": ["assert surfacearea_cube(5)==150", "assert surfacearea_cube(3)==54", "assert surfacearea_cube(10)==600"], "test": "def check(candidate):\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n\ndef test_check():\n    check(surfacearea_cube)\n\ntest_check()\n", "gt": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea"}
{"name": "mbpp_442_positive_count", "language": "py", "prompt": "def positive_count(nums):\n    \"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "positive_count", "visible_tests": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "test": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\ndef test_check():\n    check(positive_count)\n\ntest_check()\n", "gt": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)"}
{"name": "mbpp_443_largest_neg", "language": "py", "prompt": "def largest_neg(list1):\n    \"\"\"\n\tWrite a python function to find the largest negative number from the given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "largest_neg", "visible_tests": ["assert largest_neg([1,2,3,-4,-6]) == -6", "assert largest_neg([1,2,3,-8,-9]) == -9", "assert largest_neg([1,2,3,4,-1]) == -1"], "test": "def check(candidate):\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n\ndef test_check():\n    check(largest_neg)\n\ntest_check()\n", "gt": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max"}
{"name": "mbpp_444_trim_tuple", "language": "py", "prompt": "def trim_tuple(test_list, K):\n    \"\"\"\n\tWrite a function to trim each tuple by k in the given tuple list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "trim_tuple", "visible_tests": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "test": "def check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n\ndef test_check():\n    check(trim_tuple)\n\ntest_check()\n", "gt": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) "}
{"name": "mbpp_445_index_multiplication", "language": "py", "prompt": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n\tWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_multiplication", "visible_tests": ["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n\ndef test_check():\n    check(index_multiplication)\n\ntest_check()\n", "gt": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "}
{"name": "mbpp_446_count_Occurrence", "language": "py", "prompt": "def count_Occurrence(tup, lst):\n    \"\"\"\n\tWrite a python function to count the occurence of all elements of list in a tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Occurrence", "visible_tests": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"], "test": "def check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n\ndef test_check():\n    check(count_Occurrence)\n\ntest_check()\n", "gt": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  "}
{"name": "mbpp_447_cube_nums", "language": "py", "prompt": "def cube_nums(nums):\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_nums", "visible_tests": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert cube_nums([10,20,30])==([1000, 8000, 27000])", "assert cube_nums([12,15])==([1728, 3375])"], "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n\ndef test_check():\n    check(cube_nums)\n\ntest_check()\n", "gt": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums"}
{"name": "mbpp_448_cal_sum", "language": "py", "prompt": "def cal_sum(n):\n    \"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cal_sum", "visible_tests": ["assert cal_sum(9) == 49", "assert cal_sum(10) == 66", "assert cal_sum(11) == 88"], "test": "def check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n\ndef test_check():\n    check(cal_sum)\n\ntest_check()\n", "gt": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum"}
{"name": "mbpp_450_extract_string", "language": "py", "prompt": "def extract_string(str, l):\n    \"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_string", "visible_tests": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "test": "def check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n\ndef test_check():\n    check(extract_string)\n\ntest_check()\n", "gt": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result"}
{"name": "mbpp_451_remove_whitespaces", "language": "py", "prompt": "def remove_whitespaces(text1):\n    \"\"\"\n\tWrite a function to remove all whitespaces from the given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_whitespaces", "visible_tests": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "test": "def check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n\ndef test_check():\n    check(remove_whitespaces)\n\ntest_check()\n", "gt": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))"}
{"name": "mbpp_452_loss_amount", "language": "py", "prompt": "def loss_amount(actual_cost,sale_amount):\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "loss_amount", "visible_tests": ["assert loss_amount(1500,1200)==0", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "test": "def check(candidate):\n    assert candidate(1500,1200)==0\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n", "gt": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0"}
{"name": "mbpp_453_sumofFactors", "language": "py", "prompt": "def sumofFactors(n) :\n    \"\"\"\n\tWrite a python function to find the sum of even factors of a number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sumofFactors", "visible_tests": ["assert sumofFactors(18) == 26", "assert sumofFactors(30) == 48", "assert sumofFactors(6) == 8"], "test": "def check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n\ndef test_check():\n    check(sumofFactors)\n\ntest_check()\n", "gt": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res"}
{"name": "mbpp_454_text_match_wordz", "language": "py", "prompt": "def text_match_wordz(text):\n    \"\"\"\n\tWrite a function that matches a word containing 'z'.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz", "visible_tests": ["assert text_match_wordz(\"pythonz.\")==True", "assert text_match_wordz(\"xyz.\")==True", "assert text_match_wordz(\"  lang  .\")==False"], "test": "def check(candidate):\n    assert candidate(\"pythonz.\")==True\n    assert candidate(\"xyz.\")==True\n    assert candidate(\"  lang  .\")==False\n\ndef test_check():\n    check(text_match_wordz)\n\ntest_check()\n", "gt": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"}
{"name": "mbpp_455_check_monthnumb_number", "language": "py", "prompt": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n\tWrite a function to check whether the given month number contains 31 days or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumb_number", "visible_tests": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "test": "def check(candidate):\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n\ndef test_check():\n    check(check_monthnumb_number)\n\ntest_check()\n", "gt": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False"}
{"name": "mbpp_456_reverse_string_list", "language": "py", "prompt": "def reverse_string_list(stringlist):\n    \"\"\"\n\tWrite a function to reverse each string in a given list of string values.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_string_list", "visible_tests": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n\ndef test_check():\n    check(reverse_string_list)\n\ntest_check()\n", "gt": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result"}
{"name": "mbpp_457_Find_Min", "language": "py", "prompt": "def Find_Min(lst):\n    \"\"\"\n\tWrite a python function to find the sublist having minimum length.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min", "visible_tests": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "test": "def check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n\ndef test_check():\n    check(Find_Min)\n\ntest_check()\n", "gt": "def Find_Min(lst): \n    return min(lst, key=len) "}
{"name": "mbpp_458_rectangle_area", "language": "py", "prompt": "def rectangle_area(l,b):\n    \"\"\"\n\tWrite a function to find the area of a rectangle.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rectangle_area", "visible_tests": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "test": "def check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n\ndef test_check():\n    check(rectangle_area)\n\ntest_check()\n", "gt": "def rectangle_area(l,b):\n  area=l*b\n  return area"}
{"name": "mbpp_459_remove_uppercase", "language": "py", "prompt": "def remove_uppercase(str1):\n    \"\"\"\n\tWrite a function to remove uppercase substrings from a given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_uppercase", "visible_tests": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "test": "def check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\ndef test_check():\n    check(remove_uppercase)\n\ntest_check()\n", "gt": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)"}
{"name": "mbpp_460_Extract", "language": "py", "prompt": "def Extract(lst):\n    \"\"\"\n\tWrite a python function to get the first element of each sublist.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Extract", "visible_tests": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "test": "def check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n\ndef test_check():\n    check(Extract)\n\ntest_check()\n", "gt": "def Extract(lst): \n    return [item[0] for item in lst] "}
{"name": "mbpp_461_upper_ctr", "language": "py", "prompt": "def upper_ctr(str):\n    \"\"\"\n\tWrite a python function to count the upper case characters in a given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "upper_ctr", "visible_tests": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "test": "def check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n\ndef test_check():\n    check(upper_ctr)\n\ntest_check()\n", "gt": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr"}
{"name": "mbpp_462_combinations_list", "language": "py", "prompt": "def combinations_list(list1):\n    \"\"\"\n\tWrite a function to find all possible combinations of the elements of a given list.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_list", "visible_tests": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "test": "def check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\ndef test_check():\n    check(combinations_list)\n\ntest_check()\n", "gt": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result"}
{"name": "mbpp_463_max_subarray_product", "language": "py", "prompt": "def max_subarray_product(arr):\n    \"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_subarray_product", "visible_tests": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "test": "def check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\ndef test_check():\n    check(max_subarray_product)\n\ntest_check()\n", "gt": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far"}
{"name": "mbpp_464_check_value", "language": "py", "prompt": "def check_value(dict, n):\n    \"\"\"\n\tWrite a function to check if all values are same in a dictionary.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_value", "visible_tests": ["assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "test": "def check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n\ndef test_check():\n    check(check_value)\n\ntest_check()\n", "gt": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result"}
{"name": "mbpp_465_drop_empty", "language": "py", "prompt": "def drop_empty(dict1):\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "drop_empty", "visible_tests": ["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "test": "def check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n", "gt": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1"}
{"name": "mbpp_468_max_product", "language": "py", "prompt": "def max_product(arr):\n    \"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product", "visible_tests": ["assert max_product([3, 100, 4, 5, 150, 6]) == 3000", "assert max_product([4, 42, 55, 68, 80]) == 50265600", "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"], "test": "def check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6]) == 3000\n    assert candidate([4, 42, 55, 68, 80]) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n\ndef test_check():\n    check(max_product)\n\ntest_check()\n", "gt": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)"}
{"name": "mbpp_470_add_pairwise", "language": "py", "prompt": "def add_pairwise(test_tup):\n    \"\"\"\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_pairwise", "visible_tests": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "test": "def check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\ndef test_check():\n    check(add_pairwise)\n\ntest_check()\n", "gt": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) "}
{"name": "mbpp_471_find_remainder", "language": "py", "prompt": "def find_remainder(arr, n):\n    \"\"\"\n\tWrite a python function to find the product of the array multiplication modulo n.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_remainder", "visible_tests": ["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9", "assert find_remainder([1,1,1],1) == 0", "assert find_remainder([1,2,1],2) == 0"], "test": "def check(candidate):\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9\n    assert candidate([1,1,1],1) == 0\n    assert candidate([1,2,1],2) == 0\n\ndef test_check():\n    check(find_remainder)\n\ntest_check()\n", "gt": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n "}
{"name": "mbpp_472_check_Consecutive", "language": "py", "prompt": "def check_Consecutive(l):\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_Consecutive", "visible_tests": ["assert check_Consecutive([1,2,3,4,5]) == True", "assert check_Consecutive([1,2,3,5,6]) == False", "assert check_Consecutive([1,2,1]) == False"], "test": "def check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n\ndef test_check():\n    check(check_Consecutive)\n\ntest_check()\n", "gt": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) "}
{"name": "mbpp_473_tuple_intersection", "language": "py", "prompt": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n\tWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_intersection", "visible_tests": ["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "test": "def check(candidate):\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n\ndef test_check():\n    check(tuple_intersection)\n\ntest_check()\n", "gt": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)"}
{"name": "mbpp_474_replace_char", "language": "py", "prompt": "def replace_char(str1,ch,newch):\n    \"\"\"\n\tWrite a function to replace characters in a string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_char", "visible_tests": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "test": "def check(candidate):\n    assert candidate(\"polygon\",'y','l')==(\"pollgon\")\n    assert candidate(\"character\",'c','a')==(\"aharaater\")\n    assert candidate(\"python\",'l','a')==(\"python\")\n\ndef test_check():\n    check(replace_char)\n\ntest_check()\n", "gt": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2"}
{"name": "mbpp_475_sort_counter", "language": "py", "prompt": "def sort_counter(dict1):\n    \"\"\"\n\tWrite a function to sort a dictionary by value.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_counter", "visible_tests": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "test": "def check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\ndef test_check():\n    check(sort_counter)\n\ntest_check()\n", "gt": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter"}
{"name": "mbpp_476_big_sum", "language": "py", "prompt": "def big_sum(nums):\n    \"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_sum", "visible_tests": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "test": "def check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n\ndef test_check():\n    check(big_sum)\n\ntest_check()\n", "gt": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum"}
{"name": "mbpp_477_is_lower", "language": "py", "prompt": "def is_lower(string):\n    \"\"\"\n\tWrite a python function to convert the given string to lower case.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_lower", "visible_tests": ["assert is_lower(\"InValid\") == \"invalid\"", "assert is_lower(\"TruE\") == \"true\"", "assert is_lower(\"SenTenCE\") == \"sentence\""], "test": "def check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n\ndef test_check():\n    check(is_lower)\n\ntest_check()\n", "gt": "def is_lower(string):\n  return (string.lower())"}
{"name": "mbpp_478_remove_lowercase", "language": "py", "prompt": "def remove_lowercase(str1):\n    \"\"\"\n\tWrite a function to remove lowercase substrings from a given string.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_lowercase", "visible_tests": ["assert remove_lowercase(\"PYTHon\")==('PYTH')", "assert remove_lowercase(\"FInD\")==('FID')", "assert remove_lowercase(\"STRinG\")==('STRG')"], "test": "def check(candidate):\n    assert candidate(\"PYTHon\")==('PYTH')\n    assert candidate(\"FInD\")==('FID')\n    assert candidate(\"STRinG\")==('STRG')\n\ndef test_check():\n    check(remove_lowercase)\n\ntest_check()\n", "gt": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)"}
{"name": "mbpp_479_first_Digit", "language": "py", "prompt": "def first_Digit(n) :\n    \"\"\"\n\tWrite a python function to find the first digit of a given number.\n\t\"\"\"\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_Digit", "visible_tests": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1"], "test": "def check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n\ndef test_check():\n    check(first_Digit)\n\ntest_check()\n", "gt": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) "}
